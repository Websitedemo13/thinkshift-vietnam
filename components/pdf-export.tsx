"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import {
  Download,
  FileText,
  User,
  Calendar,
  Target,
  BarChart3,
  Award,
  TrendingUp,
  CheckCircle,
  Loader2,
} from "lucide-react";
import { motion } from "framer-motion";

interface PDFExportProps {
  userProfile?: {
    name: string;
    email: string;
    assessmentDate: string;
    totalScore: number;
    level: string;
  };
  careerRecommendations?: Array<{
    title: string;
    matchPercentage: number;
    description: string;
    averageSalary: string;
    jobDemand: string;
    growth: string;
  }>;
  skillAnalysis?: {
    technical: Array<{ skill: string; score: number; benchmark: number }>;
    soft: Array<{ skill: string; score: number; benchmark: number }>;
  };
  learningPath?: {
    immediate: string[];
    shortTerm: string[];
    longTerm: string[];
  };
}

export function PDFExport({
  userProfile = {
    name: "Nguy·ªÖn VƒÉn An",
    email: "an.nguyen@email.com",
    assessmentDate: "2024-01-15",
    totalScore: 85,
    level: "Xu·∫•t s·∫Øc",
  },
  careerRecommendations = [
    {
      title: "Full-stack Developer",
      matchPercentage: 92,
      description: "Ph√π h·ª£p v·ªõi kh·∫£ nƒÉng l·∫≠p tr√¨nh v√† t∆∞ duy logic",
      averageSalary: "15-30 tri·ªáu VNƒê",
      jobDemand: "R·∫•t cao",
      growth: "22%",
    },
    {
      title: "Data Scientist",
      matchPercentage: 78,
      description: "Kh·∫£ nƒÉng ph√¢n t√≠ch d·ªØ li·ªáu t·ªët",
      averageSalary: "18-35 tri·ªáu VNƒê",
      jobDemand: "Cao",
      growth: "35%",
    },
  ],
  skillAnalysis = {
    technical: [
      { skill: "Programming Logic", score: 85, benchmark: 70 },
      { skill: "Problem Solving", score: 90, benchmark: 75 },
      { skill: "System Thinking", score: 75, benchmark: 65 },
    ],
    soft: [
      { skill: "Communication", score: 70, benchmark: 80 },
      { skill: "Teamwork", score: 65, benchmark: 75 },
      { skill: "Leadership", score: 55, benchmark: 60 },
    ],
  },
  learningPath = {
    immediate: [
      "Ho√†n thi·ªán JavaScript ES6+ v√† React.js",
      "H·ªçc Node.js v√† Express framework",
      "Th·ª±c h√†nh v·ªõi Git v√† GitHub",
    ],
    shortTerm: [
      "H·ªçc thi·∫øt k·∫ø database v√† SQL",
      "T√¨m hi·ªÉu v·ªÅ RESTful API",
      "Tham gia c√°c d·ª± √°n m√£ ngu·ªìn m·ªü",
    ],
    longTerm: [
      "H·ªçc System Design",
      "T√¨m hi·ªÉu v·ªÅ Cloud Computing",
      "Ph√°t tri·ªÉn k·ªπ nƒÉng leadership",
    ],
  },
}: PDFExportProps) {
  const [isGenerating, setIsGenerating] = useState(false);

  const generatePDF = async () => {
    setIsGenerating(true);

    try {
      // Simulate PDF generation process
      await new Promise((resolve) => setTimeout(resolve, 3000));

      // Create PDF content using browser's print API
      const printWindow = window.open("", "_blank");
      if (printWindow) {
        printWindow.document.write(generatePDFHTML());
        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
        printWindow.close();
      }
    } catch (error) {
      console.error("Error generating PDF:", error);
    } finally {
      setIsGenerating(false);
    }
  };

  const generatePDFHTML = () => {
    return `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>B√°o C√°o T∆∞ V·∫•n Ngh·ªÅ Nghi·ªáp - ${userProfile.name}</title>
      <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          line-height: 1.6;
          color: #333;
          background: #fff;
        }
        .container { max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin-bottom: 40px; border-bottom: 2px solid #1B9CFC; padding-bottom: 20px; }
        .logo { color: #0A3D62; font-size: 32px; font-weight: bold; margin-bottom: 10px; }
        .subtitle { color: #1B9CFC; font-size: 18px; }
        .section { margin-bottom: 30px; page-break-inside: avoid; }
        .section-title { 
          background: linear-gradient(135deg, #0A3D62, #1B9CFC);
          color: white;
          padding: 15px;
          font-size: 20px;
          font-weight: bold;
          margin-bottom: 20px;
        }
        .user-info { background: #F9F9F9; padding: 20px; border-left: 4px solid #1B9CFC; }
        .score-highlight { 
          text-align: center;
          background: linear-gradient(135deg, #1B9CFC, #0A3D62);
          color: white;
          padding: 30px;
          margin: 20px 0;
        }
        .score-number { font-size: 48px; font-weight: bold; }
        .career-item { 
          border: 1px solid #e0e0e0;
          margin-bottom: 15px;
          padding: 20px;
          background: #fafafa;
        }
        .career-title { color: #0A3D62; font-size: 18px; font-weight: bold; margin-bottom: 10px; }
        .match-percent { 
          background: #1B9CFC;
          color: white;
          padding: 5px 15px;
          border-radius: 20px;
          display: inline-block;
          font-weight: bold;
          margin-bottom: 10px;
        }
        .skill-item { 
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 10px 0;
          border-bottom: 1px solid #eee;
        }
        .skill-bar { 
          background: #e0e0e0;
          height: 8px;
          border-radius: 4px;
          overflow: hidden;
          width: 60%;
        }
        .skill-progress { 
          background: linear-gradient(90deg, #1B9CFC, #0A3D62);
          height: 100%;
          border-radius: 4px;
        }
        .learning-phase {
          background: white;
          border: 1px solid #e0e0e0;
          padding: 20px;
          margin-bottom: 15px;
        }
        .phase-title { color: #0A3D62; font-weight: bold; margin-bottom: 15px; }
        .task-list { list-style: none; }
        .task-list li { 
          padding: 5px 0;
          padding-left: 20px;
          position: relative;
        }
        .task-list li:before {
          content: "‚úì";
          position: absolute;
          left: 0;
          color: #1B9CFC;
          font-weight: bold;
        }
        .footer {
          text-align: center;
          margin-top: 40px;
          padding-top: 20px;
          border-top: 1px solid #e0e0e0;
          color: #666;
        }
        @media print {
          body { print-color-adjust: exact; }
          .section { page-break-inside: avoid; }
        }
      </style>
    </head>
    <body>
      <div class="container">
        <!-- Header -->
        <div class="header">
          <div class="logo">ThinkShift Vietnam</div>
          <div class="subtitle">B√°o C√°o T∆∞ V·∫•n Ngh·ªÅ Nghi·ªáp C√° Nh√¢n</div>
          <div style="margin-top: 15px; color: #666;">
            ƒê∆∞·ª£c t·∫°o b·ªüi AI ‚Ä¢ ${new Date().toLocaleDateString("vi-VN")}
          </div>
        </div>

        <!-- User Information -->
        <div class="section">
          <div class="section-title">üìã Th√¥ng Tin C√° Nh√¢n</div>
          <div class="user-info">
            <p><strong>H·ªç t√™n:</strong> ${userProfile.name}</p>
            <p><strong>Email:</strong> ${userProfile.email}</p>
            <p><strong>Ng√†y ƒë√°nh gi√°:</strong> ${new Date(userProfile.assessmentDate).toLocaleDateString("vi-VN")}</p>
            <p><strong>M√£ b√°o c√°o:</strong> TSV-${Date.now().toString().slice(-6)}</p>
          </div>
        </div>

        <!-- Overall Score -->
        <div class="section">
          <div class="section-title">üéØ ƒêi·ªÉm T·ªïng Th·ªÉ</div>
          <div class="score-highlight">
            <div class="score-number">${userProfile.totalScore}/100</div>
            <div style="font-size: 18px; margin-top: 10px;">X·∫øp lo·∫°i: ${userProfile.level}</div>
            <p style="margin-top: 15px;">D·ª±a tr√™n ph√¢n t√≠ch to√†n di·ªán c√°c k·ªπ nƒÉng k·ªπ thu·∫≠t, k·ªπ nƒÉng m·ªÅm v√† t√≠nh c√°ch c√° nh√¢n</p>
          </div>
        </div>

        <!-- Career Recommendations -->
        <div class="section">
          <div class="section-title">üíº Ngh·ªÅ Nghi·ªáp Ph√π H·ª£p</div>
          ${careerRecommendations
            .map(
              (career) => `
            <div class="career-item">
              <div class="career-title">${career.title}</div>
              <div class="match-percent">${career.matchPercentage}% ph√π h·ª£p</div>
              <p style="margin-bottom: 15px;">${career.description}</p>
              <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px; font-size: 14px;">
                <div><strong>M·ª©c l∆∞∆°ng:</strong><br>${career.averageSalary}</div>
                <div><strong>Nhu c·∫ßu tuy·ªÉn d·ª•ng:</strong><br>${career.jobDemand}</div>
                <div><strong>TƒÉng tr∆∞·ªüng:</strong><br>+${career.growth}</div>
              </div>
            </div>
          `,
            )
            .join("")}
        </div>

        <!-- Skills Analysis -->
        <div class="section">
          <div class="section-title">üìä Ph√¢n T√≠ch K·ªπ NƒÉng</div>
          
          <h3 style="color: #0A3D62; margin-bottom: 15px;">K·ªπ NƒÉng K·ªπ Thu·∫≠t:</h3>
          ${skillAnalysis.technical
            .map(
              (skill) => `
            <div class="skill-item">
              <span style="width: 30%;">${skill.skill}</span>
              <div class="skill-bar">
                <div class="skill-progress" style="width: ${skill.score}%;"></div>
              </div>
              <span style="font-weight: bold; color: ${skill.score >= skill.benchmark ? "#4CAF50" : "#FF9800"};">
                ${skill.score}%
              </span>
            </div>
          `,
            )
            .join("")}

          <h3 style="color: #0A3D62; margin: 25px 0 15px 0;">K·ªπ NƒÉng M·ªÅm:</h3>
          ${skillAnalysis.soft
            .map(
              (skill) => `
            <div class="skill-item">
              <span style="width: 30%;">${skill.skill}</span>
              <div class="skill-bar">
                <div class="skill-progress" style="width: ${skill.score}%;"></div>
              </div>
              <span style="font-weight: bold; color: ${skill.score >= skill.benchmark ? "#4CAF50" : "#FF9800"};">
                ${skill.score}%
              </span>
            </div>
          `,
            )
            .join("")}
        </div>

        <!-- Learning Path -->
        <div class="section">
          <div class="section-title">üõ§Ô∏è L·ªô Tr√¨nh H·ªçc T·∫≠p ƒê∆∞·ª£c ƒê·ªÅ Xu·∫•t</div>
          
          <div class="learning-phase">
            <div class="phase-title">üöÄ Ngay l·∫≠p t·ª©c (0-3 th√°ng):</div>
            <ul class="task-list">
              ${learningPath.immediate.map((task) => `<li>${task}</li>`).join("")}
            </ul>
          </div>

          <div class="learning-phase">
            <div class="phase-title">üìà Ng·∫Øn h·∫°n (3-12 th√°ng):</div>
            <ul class="task-list">
              ${learningPath.shortTerm.map((task) => `<li>${task}</li>`).join("")}
            </ul>
          </div>

          <div class="learning-phase">
            <div class="phase-title">üéØ D√†i h·∫°n (1-2 nƒÉm):</div>
            <ul class="task-list">
              ${learningPath.longTerm.map((task) => `<li>${task}</li>`).join("")}
            </ul>
          </div>
        </div>

        <!-- Recommendations -->
        <div class="section">
          <div class="section-title">üí° Khuy·∫øn Ngh·ªã C√° Nh√¢n</div>
          <div style="background: #F0F8FF; padding: 20px; border-left: 4px solid #1B9CFC;">
            <h4 style="color: #0A3D62; margin-bottom: 15px;">D·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch, ch√∫ng t√¥i khuy√™n b·∫°n:</h4>
            <ul style="margin-left: 20px; line-height: 1.8;">
              <li>T·∫≠p trung ph√°t tri·ªÉn k·ªπ nƒÉng ${skillAnalysis.technical.find((s) => s.score < s.benchmark)?.skill || "communication"} ƒë·ªÉ tƒÉng kh·∫£ nƒÉng c·∫°nh tranh</li>
              <li>Xem x√©t h·ªçc th√™m v·ªÅ ${careerRecommendations[0].title} v·ªõi ${careerRecommendations[0].matchPercentage}% ƒë·ªô ph√π h·ª£p</li>
              <li>Tham gia c√°c kh√≥a h·ªçc online ho·∫∑c bootcamp ƒë·ªÉ nÔøΩÔøΩng cao k·ªπ nƒÉng th·ª±c h√†nh</li>
              <li>T√¨m ki·∫øm mentor trong lƒ©nh v·ª±c ${careerRecommendations[0].title} ƒë·ªÉ ƒë∆∞·ª£c h∆∞·ªõng d·∫´n c·ª• th·ªÉ</li>
              <li>X√¢y d·ª±ng portfolio v√† tham gia c√°c d·ª± √°n th·ª±c t·∫ø ƒë·ªÉ t√≠ch l≈©y kinh nghi·ªám</li>
            </ul>
          </div>
        </div>

        <!-- Footer -->
        <div class="footer">
          <p><strong>ThinkShift Vietnam</strong></p>
          <p>N·ªÅn t·∫£ng h∆∞·ªõng nghi·ªáp AI h√†ng ƒë·∫ßu Vi·ªát Nam</p>
          <p style="margin-top: 10px; font-size: 12px;">
            üìß contact@thinkshift.vn | üåê www.thinkshift.vn<br>
            B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi AI v√† ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o
          </p>
        </div>
      </div>
    </body>
    </html>
    `;
  };

  return (
    <div className="space-y-6">
      {/* PDF Preview Card */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5 text-blue-accent" />
            B√°o C√°o T∆∞ V·∫•n Ngh·ªÅ Nghi·ªáp
          </CardTitle>
          <CardDescription>
            T√†i li·ªáu chi ti·∫øt v·ªÅ k·∫øt qu·∫£ ƒë√°nh gi√° v√† l·ªô tr√¨nh ph√°t tri·ªÉn c√° nh√¢n
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Preview Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <User className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">
                  <strong>Ng∆∞·ªùi ƒë∆∞·ª£c ƒë√°nh gi√°:</strong> {userProfile.name}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">
                  <strong>Ng√†y ƒë√°nh gi√°:</strong>{" "}
                  {new Date(userProfile.assessmentDate).toLocaleDateString(
                    "vi-VN",
                  )}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <BarChart3 className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">
                  <strong>ƒêi·ªÉm t·ªïng th·ªÉ:</strong> {userProfile.totalScore}/100
                </span>
              </div>
            </div>

            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Target className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">
                  <strong>Ngh·ªÅ nghi·ªáp ph√π h·ª£p:</strong>{" "}
                  {careerRecommendations.length} g·ª£i √Ω
                </span>
              </div>
              <div className="flex items-center gap-2">
                <TrendingUp className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">
                  <strong>K·ªπ nƒÉng ƒë∆∞·ª£c ph√¢n t√≠ch:</strong>{" "}
                  {skillAnalysis.technical.length + skillAnalysis.soft.length}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Award className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">
                  <strong>L·ªô tr√¨nh h·ªçc t·∫≠p:</strong> 3 giai ƒëo·∫°n
                </span>
              </div>
            </div>
          </div>

          {/* Content Preview */}
          <div className="border border-border rounded-lg p-4 bg-muted/30">
            <h4 className="font-semibold text-foreground mb-3">
              N·ªôi dung b√°o c√°o bao g·ªìm:
            </h4>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div className="flex items-center gap-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="text-sm">
                  Th√¥ng tin c√° nh√¢n v√† k·∫øt qu·∫£ ƒë√°nh gi√°
                </span>
              </div>
              <div className="flex items-center gap-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="text-sm">
                  Ph√¢n t√≠ch chi ti·∫øt k·ªπ nƒÉng k·ªπ thu·∫≠t
                </span>
              </div>
              <div className="flex items-center gap-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="text-sm">
                  ƒê√°nh gi√° k·ªπ nƒÉng m·ªÅm v√† t√≠nh c√°ch
                </span>
              </div>
              <div className="flex items-center gap-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="text-sm">
                  Ngh·ªÅ nghi·ªáp ph√π h·ª£p v·ªõi m·ª©c ƒë·ªô ph√π h·ª£p
                </span>
              </div>
              <div className="flex items-center gap-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="text-sm">
                  L·ªô tr√¨nh h·ªçc t·∫≠p 3 giai ƒëo·∫°n chi ti·∫øt
                </span>
              </div>
              <div className="flex items-center gap-2">
                <CheckCircle className="h-4 w-4 text-green-500" />
                <span className="text-sm">
                  Khuy·∫øn ngh·ªã v√† g·ª£i √Ω c√° nh√¢n h√≥a
                </span>
              </div>
            </div>
          </div>

          {/* Export Button */}
          <div className="flex flex-col sm:flex-row gap-3">
            <Button
              onClick={generatePDF}
              disabled={isGenerating}
              className="flex-1"
              size="lg"
            >
              {isGenerating ? (
                <>
                  <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                  ƒêang t·∫°o PDF...
                </>
              ) : (
                <>
                  <Download className="mr-2 h-5 w-5" />
                  T·∫£i xu·ªëng PDF
                </>
              )}
            </Button>
            <Button variant="outline" size="lg" className="flex-1">
              <FileText className="mr-2 h-5 w-5" />
              Xem tr∆∞·ªõc
            </Button>
          </div>

          {/* Note */}
          <div className="bg-blue-accent/10 border border-blue-accent/20 rounded-lg p-4">
            <p className="text-sm text-blue-accent font-medium mb-2">
              üìã L∆∞u √Ω quan tr·ªçng:
            </p>
            <ul className="text-xs text-muted-foreground space-y-1">
              <li>
                ‚Ä¢ B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi AI d·ª±a tr√™n k·∫øt qu·∫£ ƒë√°nh gi√°
                c·ªßa b·∫°n
              </li>
              <li>
                ‚Ä¢ N·ªôi dung ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o v√† g·ª£i √Ω cho vi·ªác ƒë·ªãnh
                h∆∞·ªõng ngh·ªÅ nghi·ªáp
              </li>
              <li>
                ‚Ä¢ ƒê·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t, bÔøΩÔøΩÔøΩn n√™n k·∫øt h·ª£p v·ªõi t∆∞ v·∫•n t·ª´
                mentor chuy√™n ng√†nh
              </li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
